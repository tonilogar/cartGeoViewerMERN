{"ast":null,"code":"var _jsxFileName = \"/home/tonilogar/Documentos/trabajos/servidorVirtual/www/html/repositoriesIcgc/geo-cart-viewer-react-node-mongodb/src/components/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport '../assets/styles/components/Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoidG9uaWxvZ2FyIiwiYSI6ImNqYjZlamY1dzBtMXEzM3FxbmppeXBpeHoifQ.DbzKh1wtO4p4QOUjj9eg1w\";\n\nconst Map = () => {\n  _s();\n\n  const mapContainerRef = useRef(null); // Initialize map when component mounts\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/satellite-v9',\n      center: [1.380, 41.25],\n      maxZoom: 25,\n      minZoom: 1.65,\n      zoom: 8.4\n    }); // Add navigation control (the +/- zoom buttons)\n\n    map.addControl(new mapboxgl.NavigationControl(), 'top-right'); // DEM\n\n    map.on('load', function () {\n      map.addSource('mapbox-dem', {\n        'type': 'raster-dem',\n        'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n        'tileSize': 512,\n        'maxzoom': 14\n      }); // add the DEM source as a terrain layer with exaggerated height\n\n      map.setTerrain({\n        'source': 'mapbox-dem',\n        'exaggeration': 1.5\n      }); // add a sky layer that will show when the map is highly pitched\n\n      map.addLayer({\n        'id': 'sky',\n        'type': 'sky',\n        'paint': {\n          'sky-type': 'atmosphere',\n          'sky-atmosphere-sun': [0.0, 0.0],\n          'sky-atmosphere-sun-intensity': 15\n        }\n      });\n    });\n    map.getCanvas().style.cursor = 'default';\n    map.on('mouseenter', 'clusters', () => {\n      map.getCanvas().style.cursor = 'pointer';\n    }); // Geolocation \n\n    var coordinatesGeocoder = function (query) {\n      // match anything which looks like a decimal degrees coordinate pair\n      var matches = query.match(/^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i);\n\n      if (!matches) {\n        return null;\n      }\n\n      function coordinateFeature(lng, lat) {\n        return {\n          center: [lng, lat],\n          geometry: {\n            type: 'Point',\n            coordinates: [lng, lat]\n          },\n          place_name: 'Lat: ' + lat + ' Lng: ' + lng,\n          place_type: ['coordinate'],\n          properties: {},\n          type: 'Feature'\n        };\n      }\n\n      var coord1 = Number(matches[1]);\n      var coord2 = Number(matches[2]);\n      var geocodes = [];\n      /* if (coord1 < -90 || coord1 > 90) {\n      // must be lng, lat\n      geocodes.push(coordinateFeature(coord1, coord2));\n      }\n       \n      if (coord2 < -90 || coord2 > 90) {\n      // must be lat, lng\n      geocodes.push(coordinateFeature(coord2, coord1));\n      } */\n\n      if (geocodes.length === 0) {\n        // else could be either lng, lat or lat, lng\n\n        /* geocodes.push(coordinateFeature(coord1, coord2)); */\n        geocodes.push(coordinateFeature(coord2, coord1));\n      }\n\n      return geocodes;\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      ref: mapContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"JDsoK+vCj+KIdyRFXV6E+3zLK1c=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/tonilogar/Documentos/trabajos/servidorVirtual/www/html/repositoriesIcgc/geo-cart-viewer-react-node-mongodb/src/components/Map.jsx"],"names":["React","useRef","useEffect","useState","mapboxgl","accessToken","Map","mapContainerRef","map","container","current","style","center","maxZoom","minZoom","zoom","addControl","NavigationControl","on","addSource","setTerrain","addLayer","getCanvas","cursor","coordinatesGeocoder","query","matches","match","coordinateFeature","lng","lat","geometry","type","coordinates","place_name","place_type","properties","coord1","Number","coord2","geocodes","length","push"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport '../assets/styles/components/Map.css';\n\nmapboxgl.accessToken = \"pk.eyJ1IjoidG9uaWxvZ2FyIiwiYSI6ImNqYjZlamY1dzBtMXEzM3FxbmppeXBpeHoifQ.DbzKh1wtO4p4QOUjj9eg1w\";\n\nconst Map = () => {\n  const mapContainerRef = useRef(null);\n\n  // Initialize map when component mounts\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/satellite-v9',\n      center: [1.380, 41.25],\n      maxZoom: 25,\n      minZoom: 1.65,\n      zoom: 8.4\n    });\n    \n    // Add navigation control (the +/- zoom buttons)\n    map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n    // DEM\n    map.on('load', function () {\n      map.addSource('mapbox-dem', {\n          'type': 'raster-dem',\n          'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n          'tileSize': 512,\n          'maxzoom': 14\n      });\n      // add the DEM source as a terrain layer with exaggerated height\n      map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n  \n      // add a sky layer that will show when the map is highly pitched\n      map.addLayer({\n          'id': 'sky',\n          'type': 'sky',\n          'paint': {\n          'sky-type': 'atmosphere',\n          'sky-atmosphere-sun': [0.0, 0.0],\n          'sky-atmosphere-sun-intensity': 15\n          }\n      });\n    });\n    map.getCanvas().style.cursor = 'default';\n    map.on('mouseenter', 'clusters', () => {\n    map.getCanvas().style.cursor = 'pointer'\n  }) \n   \n  // Geolocation \n\n  var coordinatesGeocoder = function (query) {\n    // match anything which looks like a decimal degrees coordinate pair\n    var matches = query.match(\n        /^[ ]*(?:Lat: )?(-?\\d+\\.?\\d*)[, ]+(?:Lng: )?(-?\\d+\\.?\\d*)[ ]*$/i\n    );\n    if (!matches) {\n        return null;\n    }\n     \n    function coordinateFeature(lng, lat) {\n        return {\n            center: [lng, lat],\n            geometry: {\n                type: 'Point',\n                coordinates: [lng, lat]\n            },\n            place_name: 'Lat: ' + lat + ' Lng: ' + lng,\n            place_type: ['coordinate'],\n            properties: {},\n            type: 'Feature'\n        };\n    }\n     \n    var coord1 = Number(matches[1]);\n    var coord2 = Number(matches[2]);\n    var geocodes = [];\n     \n    /* if (coord1 < -90 || coord1 > 90) {\n    // must be lng, lat\n    geocodes.push(coordinateFeature(coord1, coord2));\n    }\n     \n    if (coord2 < -90 || coord2 > 90) {\n    // must be lat, lng\n    geocodes.push(coordinateFeature(coord2, coord1));\n    } */\n     \n    if (geocodes.length === 0) {\n        // else could be either lng, lat or lat, lng\n        /* geocodes.push(coordinateFeature(coord1, coord2)); */\n        geocodes.push(coordinateFeature(coord2, coord1));\n    }\n     \n    return geocodes;\n};\n\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div>\n      <div className='map-container' ref={mapContainerRef} />\n    </div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}